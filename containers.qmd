---
title: "Containers"
format: html
label: sec-containers
---

Containers are an extension of the VM concept and are now a foundational technology in cloud computing. A container is a lightweight, standalone, and executable software package that includes everything needed to run a piece of software. It will include code, runtime, libraries and system tools.


Containers share a “kernel” with the host OS.  The kernel is the part of the OS that is always running.  It has complete control over the system, controlling all hardware, managing access by applications, preventing conflicts.  By sharing the kernel with the host, containers are highly efficient.  But it also places significant limitations on the container, which must use the same kernel as the host OS.  In practise, this means containers are all Linux based. Container engines typically come with an option to create a VM.  The user sees a container, but this is running inside a VM, allowing operation on Mac, Windows (and allowing portability between Linux kernel versions).

## Container Software

Containers are typically distributed as "images", which are fast and easy to start up and run. Containers were originally introduced by Docker, along with an image format. This format is now standardised by the [Open Container Initiative (OCI)](https://opencontainers.org/).

### Container Engines

In order to run a container, the host must be running a container engine. Many engines are avilable, including the [Docker](https://www.docker.com/) engine, but alternatives such as [Podman](https://podman.io/), [Apptainer](https://apptainer.org/) are increasingly popular.

### Container creation

In order to create a container image, a container builder is required. Docker is a standard option, with [Buildah](https://buildah.io/) an alternative. Typically a container builder requires a specification for what to include in the container image. In the case of Docker, the Dockerfile provides simple instructions for creating the image.

### Container repositories

The final piece of the container ecosystem, are the container repositories. Many developers, vendors and organisations create standard containers that run well defined applications, and make them available via repositories.  These can be downloaded (often directly by the container engine) and run, simplifying the deployment process.

[https://hub.docker.com/](https://hub.docker.com/) is a registry of repositories, so it contains links to a huge number of container repositories, covering a wide range of applications.

## Workshop

The practicalities of creating and running containers with Docker, is covered in [workshop 1](https://github.com/jimbrooke/cloud-tutorial) of this segment.